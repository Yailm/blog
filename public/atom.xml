<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Fiotose]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://Fiotose.github.io//"/>
  <updated>2016-01-15T15:18:21.759Z</updated>
  <id>http://Fiotose.github.io//</id>
  
  <author>
    <name><![CDATA[Fiotose]]></name>
    <email><![CDATA[Fiotose@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[恢复Archlinux的boot分区]]></title>
    <link href="http://Fiotose.github.io/2016/01/15/%E6%81%A2%E5%A4%8DArchlinux%E7%9A%84boot%E5%88%86%E5%8C%BA/"/>
    <id>http://Fiotose.github.io/2016/01/15/恢复Archlinux的boot分区/</id>
    <published>2016-01-15T13:50:55.000Z</published>
    <updated>2016-01-15T15:18:21.759Z</updated>
    <content type="html"><![CDATA[<p>如果平时有备份boot分区的习惯，在发生什么意外的时候能够及时恢复，但由于arch的滚动升级，内核的更新往往很快，而碰巧备份文件里内核映象低于目前系统的版本，直接使用备份可能会出现问题。</p>
<p>在boot分区已经损坏的情况下，不能进入系统，我们只能借助于liveCD的帮助。在电脑上做好一个arch的usb，我们将用它来启动系统。</p>
<pre><code>$ lsblk 
sda      <span class="number">8</span>:<span class="number">0</span>    <span class="number">0</span> <span class="number">931.5</span>G  <span class="number">0</span> disk 
+-sda1   <span class="number">8</span>:<span class="number">1</span>    <span class="number">0</span>   <span class="number">268</span>M  <span class="number">0</span> part /boot
+-sda6   <span class="number">8</span>:<span class="number">6</span>    <span class="number">0</span>    <span class="number">20</span>G  <span class="number">0</span> part /
+-sda7   <span class="number">8</span>:<span class="number">7</span>    <span class="number">0</span>    <span class="number">15</span>G  <span class="number">0</span> part /var
+-sda8   <span class="number">8</span>:<span class="number">8</span>    <span class="number">0</span>    <span class="number">25</span>G  <span class="number">0</span> part /home

mount <span class="regexp">/dev/</span>sda6 /mnt
mount <span class="regexp">/dev/</span>sda1 <span class="regexp">/mnt/</span>boot
mount <span class="regexp">/dev/</span>sda7 <span class="regexp">/mnt/</span>var
mount <span class="regexp">/dev/</span>sda8 <span class="regexp">/mnt/</span>home
arch-chroot <span class="regexp">/mnt /</span>bin/bash
</code></pre><p>我们在live上面挂载好分区，然后chroot进去，之后就如同我们操作平时的电脑一样。现在只要恢复备份，然后创建当前系统内核的映象就行了。高端的可以自己生成，参考<a href="https://wiki.archlinux.org/index.php/Mkinitcpio" target="_blank" rel="external">ArchWiki mkinitcpio</a>，但我比较懒就一条命令解决了<code>sudo pacman -S linux</code>，会重新安装然后再自动生成。如果现在发现没有网络，可以<code>exit</code>，配置好网络再<code>chroot</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果平时有备份boot分区的习惯，在发生什么意外的时候能够及时恢复，但由于arch的滚动升级，内核的更新往往很快，而碰巧备份文件里内核映象低于目前系统的版本，直接使用备份可能会出现问题。</p>
<p>在boot分区已经损坏的情况下，不能进入系统，我们只能借助于liveCD]]>
    </summary>
    
      <category term="Archlinux" scheme="http://Fiotose.github.io/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World!]]></title>
    <link href="http://Fiotose.github.io/2015/10/11/Hello-World/"/>
    <id>http://Fiotose.github.io/2015/10/11/Hello-World/</id>
    <published>2015-10-11T12:43:15.000Z</published>
    <updated>2015-10-11T14:12:30.427Z</updated>
    <content type="html"><![CDATA[<p>荒颓了较长的一段时间，决定跟自己好好谈一下。并不是能改变自己的情绪或是一些看法，目下无尘的感觉不算太差，只是比较容易弄坏自己</p>
<p>已经很长的一段，我的时间记录不准，自己也懒得去好好地校正，同时也有包括我的日记。上次满心是话地打开日记本，到笔尖上还是顿生厌恶感，草草写了三两行。而且还有混乱的作息，最近习惯起了睡在傍晚，大概3点左右，然后67点再爬起来，晚上又是1点后睡，却迟迟睡不着。呵，我早就发现自己已经是别人眼里的奇葩了</p>
<p>其实改变不改变对现在的自己意义也不大，是觉得放到以后会被埋怨，这段日子肯定会有一天会结束，或不小心被终结。</p>
<p>日记真的是关键，若能好好写的话也许会有很大的改善。所以封存了旧的日记本，换成一本全白的本子，不想受线条控制的，随心所欲地记录好生活</p>
<p>利索起来</p>
<p>print “Hello World\n”;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>荒颓了较长的一段时间，决定跟自己好好谈一下。并不是能改变自己的情绪或是一些看法，目下无尘的感觉不算太差，只是比较容易弄坏自己</p>
<p>已经很长的一段，我的时间记录不准，自己也懒得去好好地校正，同时也有包括我的日记。上次满心是话地打开日记本，到笔尖上还是顿生厌恶感，草草]]>
    </summary>
    
      <category term="Life" scheme="http://Fiotose.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面试了一次新生]]></title>
    <link href="http://Fiotose.github.io/2015/09/22/%E9%9D%A2%E8%AF%95%E4%BA%86%E4%B8%80%E6%AC%A1%E6%96%B0%E7%94%9F/"/>
    <id>http://Fiotose.github.io/2015/09/22/面试了一次新生/</id>
    <published>2015-09-22T14:21:16.000Z</published>
    <updated>2015-09-22T15:13:53.990Z</updated>
    <content type="html"><![CDATA[<p>感觉自己已经和俱乐部、实验室断了好久的联系，见面竟然还是打招呼的。</p>
<p>这次微软俱乐部的纳新完全没去做任何事，只是冲着面试新生的体验去的。这样讲起来还像非常地自私，就连招我去发传单的电话都懒得接，不，不对，我一直是肯定自己的。</p>
<p>在门口晃悠了一会，旧成员都感觉有点生，糊了脸皮终于是进去了。</p>
<p>看过他们忙活过的宣讲会，感觉就是乱七八糟，真的，看不是很下去。正经的东西不多，就那几次的聚餐特别强调，对，还有生日会。</p>
<p>然后就随着一队人到了新教室，准备面试。门外，一个新生问了我问题，估计我讲的比他预期的多吧，没说完。。。</p>
<p>然而面试过程中，我们的表现估计更加比不过他们。就只让他们自我介绍下，提问几乎没有，反正我从头到尾也只问了一句。每个人下台前都要整个场尴尬几秒钟。当然我并不想做一些活，其他面试的同学也就围绕几个问题，”软件工程是你的第一个志愿吗？”，“如果你可以转专业，你会转吗？”，“学过c吗？”等等的。只是重复太多了，听着无聊。。</p>
<p>这次新生几乎都是电脑小白，只有两个有点基础，其中那个拿过一等奖比我去年还好，倒是每个都充满期待的样子，让人饶有兴趣。想想去年的热情，不然也进不来。</p>
<p>我也不是过来做正式的面试官的，给我的纸上还是没给新生做任何批注，就试着边听他们的介绍对话，一边把心里想的写了出来，也是一份不错的成品。</p>
<p>面试结束，和其他面试的同学坐在了一起，难免一些话题落在我的头上。稍微应付过去后，我一直抄写着白纸上的一些字，避免了谈话。作为在场一些伙伴共同项目的背叛者，虽然他们的任务量大了，但估计还在为能一起做项目的新鲜感高兴吧，最后就这样散了。</p>
<p>现在就不知道当初为什么过去了，明明有些”声名在外”了，还是得肯定自己吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>感觉自己已经和俱乐部、实验室断了好久的联系，见面竟然还是打招呼的。</p>
<p>这次微软俱乐部的纳新完全没去做任何事，只是冲着面试新生的体验去的。这样讲起来还像非常地自私，就连招我去发传单的电话都懒得接，不，不对，我一直是肯定自己的。</p>
<p>在门口晃悠了一会，旧成]]>
    </summary>
    
      <category term="Life" scheme="http://Fiotose.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在archlinux下搭建lnmp环境]]></title>
    <link href="http://Fiotose.github.io/2015/09/18/%E5%9C%A8archlinux%E4%B8%8B%E6%90%AD%E5%BB%BAlnmp%E7%8E%AF%E5%A2%83/"/>
    <id>http://Fiotose.github.io/2015/09/18/在archlinux下搭建lnmp环境/</id>
    <published>2015-09-18T15:21:31.000Z</published>
    <updated>2016-01-15T13:50:02.681Z</updated>
    <content type="html"><![CDATA[<p>本文主要根据<a href="http://zyan.cc" target="_blank" rel="external">张宴的BLOG</a>，我在centos虚拟机搭建成功后，想想也在archlinux练练，把搭建的笔记整理了一下。</p>
<p>这里lnmp是linux+nginx+mariadb+PHP，目前截止使用的软件都是最新的，archlinux也是保持滚动到最新</p>
<p>1.从源里直接安装一些软件</p>
<pre><code>$ sudo <span class="operator">-s</span>
<span class="comment"># pacman -S --noconfirm gcc autoconf libjpeg libpng freetype libxml2 zlib glibc glib2 bzip2 ncurses curl e2fsprogs krb5 libidn openssl pcre mhash openldap nss_ldap libmcrypt mariadb</span>
</code></pre><p>这里<code>mariadb</code>数据库直接用源里的了</p>
<pre><code><span class="preprocessor"># mkdir -p /data0/soft</span>
<span class="preprocessor"># cd /data0/soft</span>
<span class="preprocessor"># wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz</span>
<span class="preprocessor"># wget http://nginx.org/download/nginx-1.8.0.tar.gz</span>
<span class="preprocessor"># wget "http://downloads.sourceforge.net/mcrypt/mcrypt-2.6.8.tar.gz?modtime=1194463373&amp;big_mirror=0"</span>
<span class="preprocessor"># wget http://cn2.php.net/get/php-5.6.13.tar.gz/from/this/mirror</span>
<span class="preprocessor"># wget http://pecl.php.net/get/memcache-2.2.7.tgz</span>
</code></pre><p>2.接下来就开始编译PHP的支持库</p>
<pre><code><span class="preprocessor"># tar zxvf libiconv[TAB]</span>
<span class="preprocessor"># cd libiconv[TAB]</span>
<span class="preprocessor"># ./configure --prefix=/usr/local</span>
<span class="preprocessor"># make</span>
<span class="preprocessor"># make install</span>
<span class="preprocessor"># cd ..</span>

<span class="preprocessor"># tar zxvf mcrypt[TAB]</span>
<span class="preprocessor"># cd mcrypt[TAB]</span>
<span class="preprocessor"># /sbin/ldconfig</span>
<span class="preprocessor"># ./configure</span>
<span class="preprocessor"># make</span>
<span class="preprocessor"># make install</span>
<span class="preprocessor"># cd ..</span>
</code></pre><p><code>mcrypt</code>的编译有问题的，看下<code>/usr/lib/</code>中有没有libmhash和libmcrypt的库文件。</p>
<p>3.配置mariadb</p>
<p>创建mariadb的用户和数据库目录</p>
<pre><code><span class="preprocessor"># groupadd mysql</span>
<span class="preprocessor"># useradd -g mysql mysql</span>
<span class="preprocessor"># mkdir -p /data0/data/mysql</span>
<span class="preprocessor"># mkdir -p /data0/logs/mysql</span>
<span class="preprocessor"># mkdir /data0/etc</span>
</code></pre><p>创建数据表和配置文件</p>
<pre><code><span class="preprocessor"># mysql_install_db --user=mysql --basedir=/usr --datadir=/data0/data/mysql</span>
<span class="preprocessor"># vim /data0/etc/my.cnf</span>
</code></pre><p>my.cnf配置文件</p>
<pre><code>[client]
<span class="variable">character-set-server=</span>utf8
<span class="variable">port=</span><span class="number">3306</span>
<span class="variable">socket=</span>/run/mysqld/mysqld.sock

[mysqld]
<span class="variable">character-set-server=</span>utf8
<span class="variable">user=</span>mysql
<span class="variable">port=</span><span class="number">3306</span>
<span class="variable">socket=</span>/run/mysqld/mysqld.sock
<span class="variable">basedir=</span>/usr
<span class="variable">datadir=</span>/data0/data/mysql
<span class="variable">log-error=</span>/data0/logs/mysql/err.log
<span class="variable">pid-file=</span>/data0/data/mysql/mysql.pid
<span class="variable">open_files_limit=</span><span class="number">8192</span>
<span class="variable">back_log=</span><span class="number">600</span>
<span class="variable">max_connections=</span><span class="number">5000</span>
<span class="variable">max_connect_errors=</span><span class="number">6000</span>
<span class="variable">table-cache=</span><span class="number">4096</span>
<span class="variable">external-locking=</span>FALSE
<span class="variable">max_allowed_packet=</span><span class="number">32</span>M
<span class="variable">sort_buffer_size=</span><span class="number">1</span>M
<span class="variable">join_buffer_size=</span><span class="number">1</span>M
<span class="variable">thread_cache_size=</span><span class="number">256</span>
<span class="comment">#thread_concurrency=8</span>
<span class="variable">query_cache_size=</span><span class="number">512</span>M
<span class="variable">query_cache_limit=</span><span class="number">2</span>M
<span class="variable">query_cache_min_res_unit=</span><span class="number">2</span>K
<span class="variable">default_storage_engine=</span>MyISAM
<span class="variable">thread_stack=</span><span class="number">192</span>k
<span class="variable">transaction_isolation=</span>READ-COMMITTED
<span class="variable">tmp_table_size=</span><span class="number">246</span>M
<span class="variable">max_heap_table_size=</span><span class="number">246</span>M
<span class="variable">long_query_time=</span><span class="number">3</span>
log_slave_updates
<span class="variable">log-bin=</span>/data0/logs/mysql/binlog
<span class="variable">binlog_cache_size=</span><span class="number">4</span>M
<span class="variable">binlog_format=</span>MIXED
<span class="comment">#log</span>
<span class="comment">#log_warngins</span>
<span class="variable">max_binlog_size=</span><span class="number">1</span>G
<span class="variable">relay-log-index=</span>/data0/logs/mysql/relaylog
<span class="variable">relay-log-info-file=</span>/data0/logs/mysql/relaylog
<span class="variable">relay-log=</span>/data0/log/mysqlrelaylog
<span class="variable">expire_logs_days=</span><span class="number">30</span>
<span class="variable">key_buffer_size=</span><span class="number">256</span>M
<span class="variable">read_buffer_size=</span><span class="number">1</span>M
<span class="variable">read_rnd_buffer_size=</span><span class="number">16</span>M
<span class="variable">bulk_insert_buffer_size=</span><span class="number">64</span>M
<span class="variable">myisam_sort_buffer_size=</span><span class="number">128</span>M
<span class="variable">myisam_max_sort_file_size=</span><span class="number">10</span>G
<span class="variable">myisam_repair_threads=</span><span class="number">1</span>
myisam_recover

<span class="variable">interactive_timeout=</span><span class="number">120</span>
<span class="variable">wait_timeout=</span><span class="number">120</span>

skip-name-resolve
<span class="comment">#master-connect-retry=10</span>
<span class="variable">slave-skip-errors=</span><span class="number">1032</span>,<span class="number">1062</span>,<span class="number">126</span>,<span class="number">1114</span>,<span class="number">1146</span>,<span class="number">1048</span>,<span class="number">1396</span>

<span class="comment">#master-host=192.168.1.2</span>
<span class="comment">#master-user=username</span>
<span class="comment">#master-password=password</span>
<span class="comment">#master-port=3306</span>

<span class="variable">server-id=</span><span class="number">1</span>

<span class="variable">innodb_additional_mem_pool_size=</span><span class="number">16</span>M
<span class="variable">innodb_buffer_pool_size=</span><span class="number">512</span>M
<span class="variable">innodb_data_file_path=</span>ibdata1:<span class="number">512</span>M:autoextend
<span class="variable">innodb_file_io_threads=</span><span class="number">4</span>
<span class="variable">innodb_thread_concurrency=</span><span class="number">8</span>
<span class="variable">innodb_flush_log_at_trx_commit=</span><span class="number">2</span>
<span class="variable">innodb_log_buffer_size=</span><span class="number">16</span>M
<span class="variable">innodb_log_file_size=</span><span class="number">128</span>M
<span class="variable">innodb_log_files_in_group=</span><span class="number">3</span>
<span class="variable">innodb_max_dirty_pages_pct=</span><span class="number">90</span>
<span class="variable">innodb_lock_wait_timeout=</span><span class="number">120</span>
<span class="variable">innodb_file_per_table=</span><span class="number">0</span>

<span class="comment">#log-slow-queries=/data0/logs/mysql/slow.log</span>
<span class="comment">#long_query_time=10</span>

[mysqldump]
quick
<span class="variable">max_allowed_packet=</span><span class="number">32</span>M
</code></pre><p>创建管理mariadb数据库的shell脚本</p>
<pre><code><span class="comment"># mkdir -p /data0/bin</span>
<span class="comment"># vim /data0/bin/mysql</span>

<span class="shebang">#!/bin/sh</span>
mysql_username=<span class="string">"admin"</span>
mysql_password=<span class="string">"nimda"</span>          //账号等下再添加
mysql_port=<span class="number">3306</span>

<span class="function"><span class="title">function_start_mysql</span></span>()
{
    <span class="built_in">printf</span> <span class="string">"Starting MySQL..."</span>
    /bin/sh /usr/bin/mysqld_safe --defaults-file=/data0/etc/my.cnf <span class="number">2</span>&gt;&amp;<span class="number">1</span> &gt;/dev/null &amp;
    <span class="built_in">printf</span> <span class="string">"Done!\n"</span>
}

<span class="function"><span class="title">function_stop_mysql</span></span>()
{
    <span class="built_in">printf</span> <span class="string">"Stoping MySQL..."</span>
    /usr/bin/mysqladmin -u <span class="variable">${mysql_username}</span> -p<span class="variable">${mysql_password}</span> -S /run/mysqld/mysqld.sock shutdown
    <span class="built_in">printf</span> <span class="string">"Done!\n"</span>
}

<span class="function"><span class="title">function_restart_mysql</span></span>()
{
    <span class="built_in">printf</span> <span class="string">"Restarting MySQL..."</span>
    <span class="keyword">function</span>_stop_mysql
    sleep <span class="number">5</span>
    <span class="keyword">function</span>_start_mysql
    <span class="built_in">printf</span> <span class="string">"Done!\n"</span>
}

<span class="function"><span class="title">function_kill_mysql</span></span>()
{
    <span class="built_in">printf</span> <span class="string">"Killing MySQL..."</span>
    <span class="built_in">kill</span> -<span class="number">9</span> $(ps -ef | grep <span class="string">'bin/mysqld'</span> | grep <span class="variable">${mysql_port}</span> | awk <span class="string">'{printf $3 " " $2}'</span>)
    <span class="built_in">printf</span> <span class="string">"Done!\n"</span>
}

<span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"start"</span> ]; <span class="keyword">then</span>
    <span class="keyword">function</span>_start_mysql
<span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"stop"</span> ]; <span class="keyword">then</span>
    <span class="keyword">function</span>_stop_mysql
<span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"restart"</span> ]; <span class="keyword">then</span>
    <span class="keyword">function</span>_start_mysql
<span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"kill"</span> ]; <span class="keyword">then</span>
    <span class="keyword">function</span>_<span class="built_in">kill</span>_mysql
<span class="keyword">else</span>
    <span class="built_in">printf</span> <span class="string">" Usage: /data0/bin/mysql {start|stop|restart|kill}\n"</span>
<span class="keyword">fi</span>
</code></pre><p>设置好权限</p>
<pre><code><span class="preprocessor"># chmod +x /data0/bin/mysql</span>
<span class="preprocessor"># chown -R mysql:mysql /data0/data/mysql</span>
</code></pre><p>启动，确认没什么错误</p>
<pre><code><span class="preprocessor"># /data0/bin/mysql start</span>
<span class="preprocessor"># cat /data0/logs/mysql/err.log</span>
</code></pre><p>连接数据库，提示password直接回车</p>
<pre><code><span class="preprocessor"># mysql -u root -p</span>
</code></pre><p>输入SQL语句，创建刚才脚本中设置的admin用户</p>
<pre><code><span class="subst">&gt;</span> GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="subst">*</span><span class="built_in">.</span><span class="subst">*</span> <span class="keyword">TO</span> <span class="string">'admin'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'nimda'</span>;
<span class="subst">&gt;</span> GRANT <span class="literal">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="subst">*</span><span class="built_in">.</span><span class="subst">*</span> <span class="keyword">TO</span> <span class="string">'admin'</span>@<span class="string">'127.0.0.1'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'nimda'</span>;
</code></pre><p>停止MySQL</p>
<pre><code><span class="preprocessor"># /data0/bin/mysql stop         <span class="comment">//没有错误说明用户设置成功了</span></span>
</code></pre><p>4.编译安装PHP</p>
<pre><code># tar zxvf php[TAB]
# cd php[TAB]
# ./configure 
    -<span class="ruby">-prefix=<span class="regexp">/usr --with-config-file-path=/data</span><span class="number">0</span>/etc 
</span>    -<span class="ruby">-with-mysql=<span class="regexp">/usr --with-mysqli=/usr</span><span class="regexp">/bin/mysql</span>_config 
</span>    -<span class="ruby">-with-iconv-dir=<span class="regexp">/usr/local</span> --with-freetype-dir 
</span>    -<span class="ruby">-with-jpeg-dir --with-png-dir 
</span>    -<span class="ruby">-with-zlib --with-libxml-dir=<span class="regexp">/usr 
</span></span>    -<span class="ruby">-enable-xml --disable-rpath 
</span>    -<span class="ruby">-enable-bcmath --enable-shmop 
</span>    -<span class="ruby">-enable-sysvsem --enable-inline-optimization 
</span>    -<span class="ruby">-with-curl --enable-mbregex 
</span>    -<span class="ruby">-enable-fpm --enable-mbstring 
</span>    -<span class="ruby">-with-mcrypt --with-gd --enable-gd-native-ttf 
</span>    -<span class="ruby">-with-openssl --with-mhash 
</span>    -<span class="ruby">-enable-pcntl --enable-sockets 
</span>    -<span class="ruby">-with-ldap --with-ldap-sasl 
</span>    -<span class="ruby">-with-xmlrpc --enable-zip 
</span>    -<span class="ruby">-enable-soap --enable-opcache 
</span>    -<span class="ruby">-with-pdo-mysql --enable-maintainer-zts
</span># make ZEND_EXTRA_LIBS='-liconv'
# make install
# cp php.ini-development /data0/etc/php.ini
# cd ..
</code></pre><p>编译memcache扩展模块</p>
<pre><code><span class="preprocessor"># tar zxvf memcache[TAB]</span>
<span class="preprocessor"># cd memcache[TAB]</span>
<span class="preprocessor"># /usr/bin/phpize</span>
<span class="preprocessor"># ./configure   //我这里可以直接发现php-config，其他路径需加上--with-php-config=/path/to/php-config</span>
<span class="preprocessor"># make</span>
<span class="preprocessor"># make install</span>
</code></pre><p>修改php.ini文件</p>
<p>查找/data0/etc/php.ini中的extension_dir=”./“，修改为</p>
<pre><code><span class="setting">extension_dir=<span class="value"><span class="string">"/usr/lib/php/extensions/no-debug-zts-20131226/"</span></span></span>
</code></pre><p>再其后一行添加</p>
<pre><code><span class="setting">extension=<span class="value"><span class="string">"memcache.so"</span></span></span>
</code></pre><p>PHP现在已经不用eaccelerator来加速，而是使用内置的opcache，这里在php.ini中搜索opcache，直接修改相应的配置就行，这里我设置成这样</p>
<pre><code>[opcache]

zend_extension=<span class="string">"/usr/lib/php/extensions/no-debug-zts-20131226/opcache.so"</span>

; Determines <span class="keyword">if</span> Zend OPCache <span class="keyword">is</span> enabled
opcache.enable=<span class="number">1</span>

; Determines <span class="keyword">if</span> Zend OPCache <span class="keyword">is</span> enabled <span class="keyword">for</span> <span class="keyword">the</span> CLI <span class="property">version</span> <span class="keyword">of</span> PHP
opcache.enable_cli=<span class="number">1</span>

; The OPcache shared memory storage size.
opcache.memory_consumption=<span class="number">128</span>

; The amount <span class="keyword">of</span> memory <span class="keyword">for</span> interned strings <span class="keyword">in</span> Mbytes.
opcache.interned_strings_buffer=<span class="number">8</span>

; The maximum <span class="type">number</span> <span class="keyword">of</span> keys (scripts) <span class="keyword">in</span> <span class="keyword">the</span> OPcache hash table.
; Only numbers <span class="keyword">between</span> <span class="number">200</span> <span class="keyword">and</span> <span class="number">100000</span> are allowed.
opcache.max_accelerated_files=<span class="number">4000</span>

; How often (<span class="keyword">in</span> seconds) <span class="keyword">to</span> check <span class="type">file</span> timestamps <span class="keyword">for</span> changes <span class="keyword">to</span> <span class="keyword">the</span> shared
; memory storage allocation. (<span class="string">"1"</span> means validate once per <span class="keyword">second</span>, <span class="keyword">but</span> only
; once per request. <span class="string">"0"</span> means always validate)
opcache.revalidate_freq=<span class="number">60</span>

; If enabled, a fast shutdown sequence <span class="keyword">is</span> used <span class="keyword">for</span> <span class="keyword">the</span> accelerated code
opcache.fast_shutdown=<span class="number">1</span>
</code></pre><p>创建www用户和组</p>
<pre><code><span class="preprocessor"># mkdir /data0/www</span>
<span class="preprocessor"># groupadd www</span>
<span class="preprocessor"># useradd -g www www</span>
<span class="preprocessor"># chown -R www:www /data0/www</span>
</code></pre><p>配置php-fpm.conf文件（可以平滑变更php.ini而不用重启cgi)，参照了张宴的设置</p>
<pre><code><span class="comment"># vim /usr/etc/php-fpm.conf</span>

[global]
<span class="variable">pid =</span> /data0/logs/php-fpm/php-fpm.pid
<span class="variable">error_log =</span> /data0/logs/php-fpm/err.log
<span class="variable">log_level =</span> notice
<span class="variable">emergency_restart_threshold =</span> <span class="number">10</span>
<span class="variable">emergency_restart_interval =</span> <span class="number">1</span>m
<span class="variable">process_control_timeout =</span> <span class="number">5</span>s
<span class="variable">daemonize =</span> yes

[www]
<span class="variable">user =</span> www
<span class="variable">group =</span> www
<span class="variable">listen =</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span>
listen.<span class="variable">backlog =</span> <span class="number">65535</span>
listen.<span class="variable">mode =</span> <span class="number">0660</span>
listen.<span class="variable">allowed_clients =</span> <span class="number">127.0</span>.<span class="number">0.1</span>
<span class="variable">pm =</span> dynamic
pm.<span class="variable">max_children =</span> <span class="number">128</span>
pm.<span class="variable">start_servers =</span> <span class="number">20</span>
pm.<span class="variable">min_spare_servers =</span> <span class="number">5</span>
pm.<span class="variable">max_spare_servers =</span> <span class="number">35</span>
pm.<span class="variable">max_requests =</span> <span class="number">1024</span>
<span class="variable">slowlog =</span> log/$pool.log.slow
<span class="variable">request_slowlog_timeout =</span> <span class="number">0</span>s
<span class="variable">request_terminate_timeout =</span> <span class="number">0</span>
<span class="variable">rlimit_files =</span> <span class="number">65535</span>
<span class="variable">rlimit_core =</span> <span class="number">0</span>
<span class="variable">catch_workers_output =</span> yes
env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
</code></pre><p>尝试启动php-fpm</p>
<pre><code><span class="preprocessor"># ulimit -SHn 65535</span>
<span class="preprocessor"># php-fpm</span>
</code></pre><p>5.安装Nginx</p>
<pre><code># mkdir /data0/etc/nginx
# mkdir /data0/logs/nginx
# mkdir -p /data0/tmp/nginx
# tar zxvf nginx[TAB]
# cd nginx[TAB]
# ./configure 
    -<span class="ruby">-prefix=<span class="regexp">/usr --conf-path=/data</span><span class="number">0</span>/etc/nginx/nginx.conf 
</span>    -<span class="ruby">-error-log-path=<span class="regexp">/data0/logs</span><span class="regexp">/nginx/err</span>.log --http-log-path=<span class="regexp">/data0/logs</span><span class="regexp">/nginx/access</span>.log 
</span>    -<span class="ruby">-pid-path=<span class="regexp">/data0/logs</span><span class="regexp">/nginx/nginx</span>.pid --lock-path=<span class="regexp">/tmp/nginx</span>.lock 
</span>    -<span class="ruby">-user=www --group=www 
</span>    -<span class="ruby">-with-ipv6 --with-http_ssl_module 
</span>    -<span class="ruby">-with-http_spdy_module --with-http_gzip_static_module 
</span>    -<span class="ruby">-with-http_stub_status_module --http-client-body-temp-path=<span class="regexp">/data0/tmp</span><span class="regexp">/nginx/client</span>_body 
</span>    -<span class="ruby">-http-proxy-temp-path=<span class="regexp">/data0/tmp</span><span class="regexp">/nginx/proxy</span> --http-fastcgi-temp-path=<span class="regexp">/data0/tmp</span><span class="regexp">/nginx/fastcgi</span> 
</span>    -<span class="ruby">-http-uwsgi-temp-path=<span class="regexp">/data0/tmp</span><span class="regexp">/nginx/uwsgi</span> --http-scgi-temp-path=<span class="regexp">/data0/tmp</span><span class="regexp">/nginx/scgi</span>
</span># make &amp; make install
# cd ..
</code></pre><p>加了一些没用到的参数，但我相信以后可以用到</p>
<p>如果nginx已经安装了，就不要make install，执行下面语句升级，配置文件也不会丢失</p>
<pre><code><span class="preprocessor"># rm -rf /usr/sbin/nginx</span>
<span class="preprocessor"># cp objs/nginx /usr/sbin/nginx</span>
<span class="preprocessor"># make upgrade</span>
</code></pre><p>配置目录权限</p>
<pre><code><span class="preprocessor"># chmod +w /data0/logs/nginx</span>
<span class="preprocessor"># chown -R www:www /data0/logs/nginx</span>
<span class="preprocessor"># chown -R www:www /data0/tmp/nginx</span>
</code></pre><p>修改配置文件nginx.conf</p>
<pre><code><span class="comment"># vim /data0/etc/nginx/nginx.conf</span>

<span class="title">user</span>    www www;
<span class="title">worker_processes</span>  <span class="number">8</span>;

<span class="title">error_log</span>   /data0/logs/nginx/err.log   <span class="built_in">crit</span>;
<span class="title">worker_rlimit_nofile</span>    <span class="number">65535</span>;

<span class="title">events</span> {
    <span class="title">use</span>     <span class="built_in">epoll</span>;
    <span class="title">worker_connections</span>  <span class="number">65535</span>;
}

<span class="title">http</span> {
    <span class="title">include</span>       mime.types;
    <span class="title">default_type</span>  application/octet-stream;

    <span class="title">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span>
                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span>
                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;

    <span class="title">access_log</span> /data0/logs/nginx/access.log  main;

    <span class="title">server_names_hash_bucket_size</span>    <span class="number">128</span>;
    <span class="title">client_header_buffer_size</span>   <span class="number">32k</span>;
    <span class="title">large_client_header_buffers</span>     <span class="number">4</span> <span class="number">32k</span>;
    <span class="title">client_max_body_size</span>    <span class="number">8m</span>;

    <span class="title">sendfile</span>        <span class="built_in">on</span>;
    <span class="title">tcp_nopush</span>     <span class="built_in">on</span>;

    <span class="title">keepalive_timeout</span>  <span class="number">60</span>;

    <span class="title">tcp_nodelay</span> <span class="built_in">on</span>;

    <span class="title">fastcgi_connect_timeout</span> <span class="number">300</span>;
    <span class="title">fastcgi_send_timeout</span>    <span class="number">300</span>;
    <span class="title">fastcgi_read_timeout</span>    <span class="number">300</span>;
    <span class="title">fastcgi_buffer_size</span>     <span class="number">64k</span>;
    <span class="title">fastcgi_buffers</span>     <span class="number">4</span>   <span class="number">64k</span>;
    <span class="title">fastcgi_busy_buffers_size</span>   <span class="number">128k</span>;
    <span class="title">fastcgi_temp_file_write_size</span>    <span class="number">128k</span>;

    <span class="title">gzip</span>  <span class="built_in">on</span>;
    <span class="title">gzip_min_length</span>     <span class="number">1k</span>;
    <span class="title">gzip_buffers</span>    <span class="number">4</span>   <span class="number">16k</span>;
    <span class="title">gzip_http_version</span>   <span class="number">1</span>.<span class="number">0</span>;
    <span class="title">gzip_comp_level</span>     <span class="number">2</span>;
    <span class="title">gzip_types</span>      text/plain application/x-javascript text/css application/xml;
    <span class="title">gzip_vary</span>       <span class="built_in">on</span>;

    <span class="title">server</span> {
        <span class="title">listen</span>       <span class="number">80</span>;
        <span class="title">server_name</span>  localhost;
        <span class="title">index</span> index.html index.htm index.php;
        <span class="title">root</span> /data0/www;

        <span class="comment">#error_page  404              /404.html;</span>

        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
        <span class="comment">#</span>
        <span class="title">location</span> <span class="regexp">~ .*\.(php|php5)?$</span> {
            <span class="title">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;
            <span class="title">fastcgi_index</span>  index.php;
            <span class="title">fastcgi_param</span>  SCRIPT_FILENAME  /scripts<span class="variable">$fastcgi_script_name</span>;
            <span class="title">include</span>        fastcgi_params;
        }

        <span class="title">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span> {
            <span class="title">expires</span> <span class="number">30d</span>;
        }

        <span class="title">location</span> <span class="regexp">~ .*\.(js|css)?$</span> {
            <span class="title">expires</span> <span class="number">1h</span>;
        }

        <span class="title">location</span> /status/ {
            <span class="title">stub_status</span> <span class="built_in">on</span>;
            <span class="title">access_log</span>  <span class="built_in">off</span>;
        }
    }
}
</code></pre><p>最后启动nginx</p>
<pre><code><span class="preprocessor"># ulimit -SHn 65535</span>
<span class="preprocessor"># nginx</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要根据<a href="http://zyan.cc" target="_blank" rel="external">张宴的BLOG</a>，我在centos虚拟机搭建成功后，想想也在archlinux练练，把搭建的笔记整理了一下。</p>
<p>这里lnmp是lin]]>
    </summary>
    
      <category term="Archlinux" scheme="http://Fiotose.github.io/tags/Archlinux/"/>
    
      <category term="Webserver" scheme="http://Fiotose.github.io/tags/Webserver/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我无所谓，但是不许你逃]]></title>
    <link href="http://Fiotose.github.io/2015/08/07/%E6%88%91%E6%97%A0%E6%89%80%E8%B0%93%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E8%AE%B8%E4%BD%A0%E9%80%83/"/>
    <id>http://Fiotose.github.io/2015/08/07/我无所谓，但是不许你逃/</id>
    <published>2015-08-07T13:56:55.000Z</published>
    <updated>2015-10-06T16:52:09.569Z</updated>
    <content type="html"><![CDATA[<p>感觉我心里有点高兴，不知道该怎样开始讲这件事。这样的，不过是发现一部动漫，在已经末世的现在，心情舒畅。</p>
<p>是个老番<a href="http://baike.baidu.com/subview/112177/11252341.htm" target="_blank" rel="external">《吸血姬美夕》</a>，感觉色调蛮符合的，就看了下来。里面有着人世的美好，但更多的则是丑恶。主角只是一个观察者，几乎不受其他影响的，目的是把神魔送入黑暗，不关邪恶或是无辜，而让自己不去留意各样的人类。这样下来就是留下极大的无奈，每一集来都落不下一个好结局。对所有的态度仅仅是都可以，遥望这些荒诞的世故</p>
<p>接过别人的一句话，现在许多的东西，刻意的宣扬着美好的东西。太多的博爱同情，太多的热血正义，帮助什么拯救什么，让人感觉到很累，更加令我厌恶。我更想明白自己的无力，奇迹真的都不会真实。这动画里，再美好的东西，碍着就应该毫不留情的打碎。同样的，有些悲情的命运一旦发生也不能再去挽救，世界本来就是残缺的，残酷现实才是本质。</p>
<p>也许主角给予的永恒的幸福才是最大的悲哀吧，就仅仅沉醉那不实的梦。不用想，就是吸血姬也不会进食我，会被讨厌，因为让活着是她认为的惩罚。</p>
<p>然而我说得不准确，主角后来让我稍稍失望</p>
<p><img src="http://ww2.sinaimg.cn/small/97d85706gw1euuf3538g1j20dw0m8myr.jpg" alt="吸血姬美夕"></p>
<p>2015.08.10 19:27重新编辑</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>感觉我心里有点高兴，不知道该怎样开始讲这件事。这样的，不过是发现一部动漫，在已经末世的现在，心情舒畅。</p>
<p>是个老番<a href="http://baike.baidu.com/subview/112177/11252341.htm" target="_blan]]>
    </summary>
    
      <category term="Animes" scheme="http://Fiotose.github.io/tags/Animes/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[state]]></title>
    <link href="http://Fiotose.github.io/2015/07/26/states/"/>
    <id>http://Fiotose.github.io/2015/07/26/states/</id>
    <published>2015-07-26T13:42:55.000Z</published>
    <updated>2015-08-07T14:06:12.458Z</updated>
    <content type="html"><![CDATA[<p>看到一段时间前我尝试剥离下来的主题作者已经放出，就兴冲冲地过来更新我自己的博客，同时感谢作者。</p>
<p>虽然发生了一点小问题（我之前的文章都被不小心删除了，其实也是有点故意的），幸好也没什么东西，现在就安心在这个博客上面了</p>
<p>当然这一篇博文的题名不是白命名的，我来讲讲我的状态吧。</p>
<p>首先是女朋友的离去，不知道怎么讲，想来想去都是我应得的。对啊，她说并没有感觉到我的船正驶向她，我感到抱歉，聊天之间三三两两几句都十分的僵硬。我也不知道她踏上别人的船有多长时间了，或是半年一年我也不知道。其实我也做好心理准备了，还好有很长一段时间是能知道她是真的喜欢我的，仍然会很高兴的。</p>
<p>我想她的济南之行我们应该就是告别了，偏偏又有那种迷恋的，唉就是太完美了。既然肉串没有能拼接好，就真的再见了。</p>
<p>我知道我已经意志消沉了好久了，现在也是，生活一塌糊涂得可怕，她翻过我的时间记录也是知道的。那今天写这个是干嘛的？我不明白能给我带来什么，明明自己就是想借理由来堕落，我都说不过我自己，连考试都不去挣扎抢救一下了</p>
<p>就是让自己目光长远一点，我定了一个300多天的长度，现在只剩下226天，有些东西放在未来真是让人舒畅多了。</p>
<p>我知道我一些游戏玩不下去的原因了，牧场物语和饥荒我是从心里喜欢的，但却不能长久，玩着玩着就突然失去了目标，不知道能做什么了。现在我好像开始为自己而活着，也是同理</p>
<p>昨日，群里有人匿名说了不该说的话，我能感觉到大部分人都是认定是我，非常不喜欢被误解的感觉。也差不多该收缩自己的圈子了，就当是我说的吧，对的，我喜欢连着发我喜欢的句号。。。。。。</p>
<p>哈哈，这是什么糟糕的文章啊！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>看到一段时间前我尝试剥离下来的主题作者已经放出，就兴冲冲地过来更新我自己的博客，同时感谢作者。</p>
<p>虽然发生了一点小问题（我之前的文章都被不小心删除了，其实也是有点故意的），幸好也没什么东西，现在就安心在这个博客上面了</p>
<p>当然这一篇博文的题名不是白命名]]>
    </summary>
    
      <category term="Life" scheme="http://Fiotose.github.io/tags/Life/"/>
    
  </entry>
  
</feed>